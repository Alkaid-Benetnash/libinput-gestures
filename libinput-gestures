#!/usr/bin/env python3
'Read gestures from libinput touchpad and action shell commands.'
# Mark Blakeney, Sep 2015
import os, sys, argparse, subprocess, shlex, re, getpass, fcntl, platform
from pathlib import Path

PROG = Path(sys.argv[0]).name

# Conf file containing gesture commands.
# Search first for user file then system file.
CONFNAME = '{}.conf'.format(PROG)
USERDIR = os.getenv('XDG_CONFIG_DIR', os.path.expanduser('~/.config'))
CONFDIRS = (USERDIR, '/etc')

# Set up command line arguments
opt = argparse.ArgumentParser(description=__doc__)
opt.add_argument('-c', '--conffile',
        help='Gestures alternative configuration file')
opt.add_argument('-v', '--verbose', action='store_true',
        help='Output diagnostic messages')
opt.add_argument('-r', '--raw', action='store_true',
        help='Output raw libinput-debug-event messages only, '
        'do not action gestures')
opt.add_argument('--device',
        help='device name to use, explicitly specified')
opt.add_argument('-d', '--debug', action='store_true',
        help='Output diagnostic messages only, do not action gestures')
args = opt.parse_args()

if args.debug:
    args.verbose = True

def open_lock(*args):
    'Create a lock based on given list of arguments'
    # We use exclusive assess to a file for this
    fp = Path('/tmp', '-'.join(args) + '.lock').open('w')
    try:
        fcntl.lockf(fp, fcntl.LOCK_EX | fcntl.LOCK_NB)
    except IOError:
        return None

    return fp

def run(cmd, check=True):
    'Run subprocess function and return standard output or None'
    # Maintain subprocess compatability with python 3.4 so use
    # check_output() rather than run().
    try:
        stdout = subprocess.check_output(cmd, universal_newlines=True,
                stderr=(None if check else subprocess.DEVNULL))
    except Exception as e:
        stdout = None
        if check:
            print(str(e), file=sys.stderr)

    return stdout

def internal(args):
    'Internal command handler.'
    # Commands currently supported are:
    commands = (
        'ws_up',
        'ws_down',
    )
    # Set up command line arguments
    opti = argparse.ArgumentParser(description=internal.__doc__)
    opti.add_argument('-w', '--wrap', action='store_true',
            help='Wrap workspaces when switching to/from start/end')
    opti.add_argument('--row', type=int,
            help='Step along the row for this number in a row')
    opti.add_argument('--col', type=int,
            help='Step along the column for this number in a column')
    opti.add_argument('action', choices=commands,
            help='Internal command to action')
    argsi = opti.parse_args(args)

    # Get list of current workspaces
    stdout = run(('wmctrl', '-d'), check=False)
    if not stdout:
        # This command can fail on GNOME when you have only a single
        # dynamic workspace using Xorg (probably a GNOME bug) so let's
        # just ignore it given there is no other workspace to switch to
        # anyhow.
        return

    out = stdout.strip().splitlines()
    lines = [l.split(maxsplit=3)[1] for l in out]
    index = lines.index('*')

    if argsi.row:
        minindex = index - (index % argsi.row)
        maxindex = minindex + argsi.row
        count = 1
    else:
        minindex = 0
        maxindex = len(lines)
        count = (maxindex // argsi.col) if argsi.col else 1

    # Switch to desired workspace
    index += count if argsi.action == 'ws_up' else -count
    if argsi.wrap:
        if index == minindex - count:
            index = maxindex - count
        elif index >= maxindex:
            index = minindex

    if index >= minindex and index < maxindex:
        run(('wmctrl', '-s', str(index)))

def get_device(name):
    'Determine libinput touchpad device (path, name)'
    stdout = run('libinput-list-devices')
    if stdout:
        devname = None
        dev = None
        devname_text = None
        dev_text = None
        has_size = False
        for line in stdout.splitlines():
            line = line.strip()
            if not line or ':' not in line:
                continue

            key, value = line.split(':', maxsplit=1)
            key = key.strip()
            value = value.strip()

            # Look for touchpad
            if key == 'Device':
                devname = value
                if not dev_text and re.search(r'touch ?pad', devname, re.I):
                    devname_text = devname
            elif key == 'Kernel':
                dev = value
                if devname and devname == name:
                    return dev, devname
                if not dev_text and devname_text:
                    dev_text = dev
                has_size = False
            elif key == 'Size' and dev:
                has_size = True
            elif key == 'Capabilities' and value == 'pointer' and has_size \
                    and not name:
                return dev, devname

        # If we did not find a touchpad using the regular search but at
        # least found a device with the string "touchpad" in it's device
        # name then return that.
        if dev_text:
            return dev_text, devname_text

        if not devname:
            print('Can not see any devices, did you add yourself to the '
                    'input group?', file=sys.stderr)

    sys.exit('Could not determine touchpad device.')

# Table of gesture handlers
handlers = {}

def add_gesture_handler(cls):
    'Create gesture handler instance and add to lookup table based on name'
    handlers[cls.__name__] = cls()

class GESTURE:
    'Abstract base class for handling for gestures'
    def __init__(self):
        'Initialise this gesture at program start'
        self.name = type(self).__name__
        self.motions = {}

    def add(self, motion, fingers, command):
        'Add a configured motion command for this gesture'
        if motion not in self.SUPPORTED_MOTIONS:
            return 'Motion "{}" is not supported for {}'.format(motion,
                    self.name)

        key = (motion, fingers) if fingers else motion
        self.motions[key] = shlex.split(command)
        return None

    def action(self, motion):
        'Action a motion command for this gesture'

        command = self.motions.get((motion, self.fingers)) or \
                self.motions.get(motion)

        if args.verbose:
            print('{}: {} {} {} {}'.format(PROG, self.name, motion,
                self.fingers, self.data))
            if command:
                print('  ', ' '.join(command))

        if command and not args.debug:
            if command[0] == '_internal':
                internal(command[1:])
            else:
                run(command)

@add_gesture_handler
class SWIPE(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('left', 'right', 'up', 'down')

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.data = [0.0, 0.0]

    def update(self, coords):
        'Update this gesture for a motion'
        self.data[0] += float(coords[2])
        self.data[1] += float(coords[3])

    def end(self):
        'Action this gesture at the end of a motion sequence'
        # Require movement beyond a small threshhold.
        if abs(self.data[0] - self.data[1]) >= 70:
            if abs(self.data[0]) > abs(self.data[1]):
                motion = 'left' if self.data[0] < 0 else 'right'
            else:
                motion = 'up' if self.data[1] < 0 else 'down'

            self.action(motion)

@add_gesture_handler
class PINCH(GESTURE):
    'Class to handle this type of gesture'
    SUPPORTED_MOTIONS = ('in', 'out')

    def begin(self, fingers):
        'Initialise this gesture at the start of motion'
        self.fingers = fingers
        self.data = 0.0

    def update(self, coords):
        'Update this gesture for a motion'
        self.data += 1.0 - float(coords[5])

    def end(self):
        'Action this gesture at the end of a motion sequence'
        if self.data != 0.0:
            self.action('in' if self.data >= 0.0 else 'out')

# Table of configuration commands
conf_commands = {}

def add_conf_command(func):
    'Add configuration command to command lookup table based on name'
    conf_commands[re.sub('^conf_', '', func.__name__)] = func

@add_conf_command
def conf_gesture(lineargs):
    'Process a single gesture line in conf file'
    fields = lineargs.split(maxsplit=2)

    # Look for configured gesture. Sanity check the line.
    if len(fields) < 3:
        return 'Invalid gesture line'

    gesture, motion, command = fields

    handler = handlers.get(gesture.upper())
    if not handler:
        return 'Gesture "{}" is not supported'.format(gesture)

    # Gesture command can be configured with optional specific finger
    # count so look for that
    fingers = None
    fcommand = command.split(maxsplit=1)
    if len(fcommand) > 1:
        fcount, ncommand = fcommand
        if fcount.isdigit() and len(fcount) == 1:
            command = ncommand
            fingers = fcount

    # Add the configured gesture
    return handler.add(motion.lower(), fingers, command)

@add_conf_command
def conf_device(lineargs):
    'Process a single device line in conf file'
    # Command line overrides configuration file
    if not args.device:
        args.device = lineargs

    return None if args.device else 'No device specified'

def get_conf_line(line):
    'Process a single line in conf file'

    fields = line.split(maxsplit=1)
    if len(fields) < 2:
        return 'Invalid configuration line'

    key, lineargs = fields
    key = key.rstrip(':')
    conf_func = conf_commands.get(key)

    if not conf_func:
        return 'Configuration command "{}" is not supported'.format(key)

    return conf_func(lineargs)

def get_conf(conffile):
    '''
    Read configuration file, given path. Returns True if file exists and
    was read.
    '''
    if not conffile.exists():
        return False

    with conffile.open() as fp:
        for line in fp:
            line = line.strip()
            if not line or line[0] == '#':
                continue

            errmsg = get_conf_line(line)
            if errmsg:
                sys.exit('Error in file {} at line:\n{}.\n{}.'.format(
                    conffile, line, errmsg))
    return True

# Make sure only one instance running for current user
user = getpass.getuser()
proglock = open_lock(PROG, user)
if not proglock:
    sys.exit('{} is already running for {}, terminating ..'.format(PROG, user))

# Read gestures from conf file. Use file given as command line argument,
# else look in user dir then system dir.
if args.conffile:
    conf = Path(args.conffile)
    if not get_conf(conf):
        sys.exit('Conf file "{}" does not exist.'.format(args.conffile))
else:
    for confdir in CONFDIRS:
        conf = Path(confdir, CONFNAME)
        if get_conf(conf):
            break
    else:
        sys.exit('No file {} in {}.'.format(CONFNAME,
            ' or '.join(CONFDIRS)))

# Get touchpad device
device = get_device(args.device) \
        if not args.device or args.device.lower() != "all" else None

if args.verbose:
    if device:
        print('{}: device {}: {}'.format(PROG, device[0],
            device[1]))
    else:
        print('{}: monitoring all devices'.format(PROG))

    xsession = os.getenv('XDG_SESSION_DESKTOP',
            os.getenv('DESKTOP_SESSION', 'unknown'))
    xtype = os.getenv('XDG_SESSION_TYPE', 'unknown')
    print('{}: session {}+{} on {} and python {}'.format(PROG, xsession, xtype,
        platform.platform(), platform.python_version()))

    print('{}: using {} with {} gestures'.format(PROG,
        conf, sum([len(h.motions) for h in handlers.values()])))

# Note your must "sudo gpasswd -a $USER input" then log out/in for
# permission to access the device.
devstr = ' --device {}'.format(device[0]) if device else ''
command = 'stdbuf -oL -- libinput-debug-events{}'.format(devstr)

cmd = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE,
        bufsize=0, universal_newlines=True)

# Sit in a loop forever reading the libinput debug output for GESTURES ..
handler = None
for line in cmd.stdout:

    # Just output raw messages if in that debug mode
    if args.raw:
        print(line.strip())
        continue

    # Only interested in gestures
    if 'GESTURE_' not in line:
        continue

    # Split debug line into relevant fields
    dev, gevent, time, other = line.strip().split(maxsplit=3)
    gesture, event = gevent[8:].split('_')
    if ' ' in other:
        fingers, params = other.split(maxsplit=1)
    else:
        fingers, params = other, None

    # Action each type of event
    if event == 'UPDATE':
        if handler:
            handler.update(re.split(r'[ (/@]+', params))
    elif event == 'BEGIN':
        handler = handlers.get(gesture)
        if handler:
            handler.begin(fingers)
        else:
            print('Unknown gesture received: {}.'.format(gesture),
                    file=sys.stderr)
    elif event == 'END':
        # Ignore gesture if final action is cancelled
        if params != 'cancelled' and handler:
            handler.end()
        handler = None
    else:
        print('Unknown gesture + event received: {} + {}.'.format(gesture,
            event), file=sys.stderr)
